<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>分24期买泡面🍜</title><link>https://onlw.github.io/</link><description>Recent content on 分24期买泡面🍜</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>1216062928@qq.com (Who)</managingEditor><webMaster>1216062928@qq.com (Who)</webMaster><copyright>© 2021 &lt;a href="">kagome&lt;/a>.</copyright><lastBuildDate>Sun, 18 Sep 2022 22:24:30 +0800</lastBuildDate><atom:link href="https://onlw.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Clickhouse Start</title><link>https://onlw.github.io/posts/202209182224/</link><pubDate>Sun, 18 Sep 2022 22:24:30 +0800</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/202209182224/</guid><description>uius rpcf</description></item><item><title>Hugo Start</title><link>https://onlw.github.io/posts/202209182146/</link><pubDate>Sun, 18 Sep 2022 21:46:38 +0800</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/202209182146/</guid><description>安装hugo （mac） brew install hugo 初始化博客 hugo new my-blog 安装主题 cd my-blog git init git submodule add https://github.com/miiiku/hugo-theme-kagome.git ./themes/kagome cp -rf themes/kagome/exampleSite/* ./ 运行 hugo start 接入 github-pages</description></item><item><title>laravel-throttle</title><link>https://onlw.github.io/posts/201910100000/</link><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201910100000/</guid><description>Throttle Throttle : 风门 喉咙 喉 结论：以每分钟请求数为单位，但是间隔可以为小数 60,1 一分钟请求60次 6,0.1 6秒请求6次 Kernel.php # App\Http\Kernel.php protected $routeMiddleware = [ &amp;#39;auth&amp;#39; =&amp;gt; \App\Http\Middleware\Authenticate::class, &amp;#39;auth.basic&amp;#39; =&amp;gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class, &amp;#39;bindings&amp;#39; =&amp;gt; \Illuminate\Routing\Middleware\SubstituteBindings::class, &amp;#39;cache.headers&amp;#39; =&amp;gt; \Illuminate\Http\Middleware\SetCacheHeaders::class, &amp;#39;can&amp;#39; =&amp;gt; \Illuminate\Auth\Middleware\Authorize::class, &amp;#39;guest&amp;#39;</description></item><item><title>spring cloud config source code analysis</title><link>https://onlw.github.io/posts/201909300000/</link><pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201909300000/</guid><description>Spring Cloud Config Source code analysis config client 请求 config server接口，config server 拉取 git repository 的代码，然后反馈给 config client Config Server 入口文件 import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.config.server.EnableConfigServer; @SpringBootApplication @EnableConfigServer public class ConfigServerApplication { public static void main(String[] args) { SpringApplication.run(ConfigServerApplication.class, args); } }</description></item><item><title>Load balancing</title><link>https://onlw.github.io/posts/201909180000/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201909180000/</guid><description>介绍 负载均衡，是现代计算机领域的基础服务之一。其基本原理是通过运行在前面的负载均衡服务，按照指定的负载均衡算法，将流量分配到后端服务集群上，</description></item><item><title>Spring Cloud Ribbon</title><link>https://onlw.github.io/posts/201909180000/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201909180000/</guid><description>Introduction Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的客户端负载均衡工具。 Ribbon是一个客户端负载均衡器，可以让您对HTTP和TCP客户端的行为进行大量控制。Feig</description></item><item><title>Spring Cloud Stream</title><link>https://onlw.github.io/posts/201909170000/</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201909170000/</guid><description>Spring Cloud Stream Introduction Spring Cloud Stream是一种用于构建具有共享消息系统连接高度可扩展的事件驱动微服务的框架。 该框架提供了一个灵活的编程模型建立在已建立的和熟</description></item><item><title>Implementing the openssl_encrypt method of PHP using Java</title><link>https://onlw.github.io/posts/201909110000/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201909110000/</guid><description>使用 Java 实现 PHP openssl_encrypt加密方法 PHP Implement public static function encrypt($input, $key) { $data = openssl_encrypt($input, &amp;#39;AES-128-ECB&amp;#39;, $key, OPENSSL_RAW_DATA); $data = base64_encode($data); return $data; } public static function decrypt($input, $key) { $decrypted = openssl_decrypt(base64_decode($input), &amp;#39;AES-128-ECB&amp;#39;, $key, OPENSSL_RAW_DATA); return $decrypted; } Java Implement public static String encrypt(String data, String password) throws</description></item><item><title>Spring Cloud Netflix Eureka</title><link>https://onlw.github.io/posts/201909030000/</link><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201909030000/</guid><description>Spring Cloud Netflix Eureka Introduction Service Discovery是基于微服务的体系结构的关键原则之一。尝试手动配置每个客户端或某种形式的约定可能很难做到并且可能很脆弱。Eur</description></item><item><title>Spring Cloud Config</title><link>https://onlw.github.io/posts/201909010000/</link><pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201909010000/</guid><description>Spring Cloud Config Introduction Spring Cloud Config为分布式系统中的外部化配置提供服务器端和客户端支持。使用Config Server，您可以在所有环境中管理应用程序的外</description></item><item><title>Java basic grammar</title><link>https://onlw.github.io/posts/201908210000/</link><pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201908210000/</guid><description>Java basic grammar Java Basic grammar 编写 Java 程序时，应注意以下几点： 大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。 类名：对于所有的类来说，类名的</description></item><item><title>java exception</title><link>https://onlw.github.io/posts/201908200000/</link><pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201908200000/</guid><description>Java 异常 Java Exception Introduction 异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。 比如说，你的代码少了一个分号，那么运行出来结果是</description></item><item><title>HTTP2</title><link>https://onlw.github.io/posts/201908190000/</link><pubDate>Mon, 19 Aug 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201908190000/</guid><description>HTTP/2 History HTTP/2（超文本传输协议第2版，最初命名为HTTP 2.0），简称为h2（基于TLS/1.2或以上版本的加密连接）或h2c（非加密连接</description></item><item><title>oauth2.0</title><link>https://onlw.github.io/posts/201908010000/</link><pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201908010000/</guid><description>开放授权（OAuth）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名</description></item><item><title>difference between mongo mongodb mongod</title><link>https://onlw.github.io/posts/201907290000/</link><pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907290000/</guid><description>Difference between mongo mongodb mongod Mongod Mongo Daemon 即守护进程 # ps -A root@2524adecfdfb:/# ps -A PID TTY TIME CMD 1 ? 00:03:17 mongod 57 pts/0 00:00:00 bash 83 pts/0 00:00:00 ps Mongo command-line shell # mongo localhost:27017 root@2524adecfdfb:/# mongo localhost:27017 MongoDB shell version v4.0.10 connecting to: mongodb://localhost:27017/test?gssapiServiceName=mongodb Implicit session: session { &amp;#34;id&amp;#34; : UUID(&amp;#34;d1bfacc3-15b2-41a6-b6fa-cf422e0506fc&amp;#34;) } MongoDB server version: 4.0.10 Server has startup warnings: 2019-07-25T07:14:11.075+0000 I CONTROL</description></item><item><title>php extension install</title><link>https://onlw.github.io/posts/201907290000/</link><pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907290000/</guid><description>##List PHP extensions php -m # show like this [PHP Modules] libevent posix pcntl ##Install ###Redis 可以使用 predis composer 扩展包的方式达成对Redis的操作，效果与Redis扩展大同小异 ####Mac ####Ubuntu References [predis包和phpr</description></item><item><title>programming noun</title><link>https://onlw.github.io/posts/201907290000/</link><pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907290000/</guid><description>List commonly used programming nouns Abbreviation Common HTTP HTTP（HyperText Transfer Protocol）：超文本传输协议 是一种用于分布式、协作式和超媒体信息系统的应用层协议。 CAP CA</description></item><item><title>laravel Facades</title><link>https://onlw.github.io/posts/201907260000/</link><pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907260000/</guid><description>Laravel Facade 执行流程分析 Introduction Facades 为应用程序提供了一系列的静态方法，提供简洁，富有表现力的语法，同时保持比传统静态方法更多的可测试性和灵活性。 Demo Used in code // cache</description></item><item><title>difference between socket and websocket</title><link>https://onlw.github.io/posts/201907230000/</link><pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907230000/</guid><description>Difference between socket and websocket Socket 套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许</description></item><item><title>OSI - Open System Interconnection Reference Model</title><link>https://onlw.github.io/posts/201907220000/</link><pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907220000/</guid><description>开放式系统互联通信参考模型（英语：Open System Interconnection Reference Model，缩写：OSI；简称为OSI模型）是一种概念模型，由国际标准化组织提出，一个试图使</description></item><item><title>types-of-dependency-injection</title><link>https://onlw.github.io/posts/201907150000/</link><pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907150000/</guid><description>Types of Dependency Injection 此篇文章使用 Java 代码作为演示 如果希望了解 Dependency Injection 和 Inversion of Control 可以参考·· Spring通过DI（依赖注入）实现IoC（控制反转) 建议看一下这篇文</description></item><item><title>laravel-queue-timeout-configuration-not-working</title><link>https://onlw.github.io/posts/201907040000/</link><pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907040000/</guid><description>laravel 设置队列超时时间，但是并没有生效 Development environments laravel : v5.5 # https://laravel.com/docs/5.5/installation laravel5.5 server requirements : PHP &amp;gt;= 7.0.0 php : v7.1.30 code Controller &amp;lt;?php namespace App\Http\Controllers; use App\Jobs\Test; class QueueController extends Controller { public function index() { echo &amp;#39;queue start&amp;#39;; Test::dispatch()-&amp;gt;onQueue(&amp;#39;testQueue&amp;#39;); echo &amp;#39;queue end&amp;#39;; } } Job &amp;lt;?php namespace App\Jobs; use App\User; use Illuminate\Bus\Queueable; use Illuminate\Queue\SerializesModels; use</description></item><item><title>phpunit</title><link>https://onlw.github.io/posts/201907040000/</link><pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907040000/</guid><description>PHPUnit是一个面向PHP程序员的测试框架，这是一个xUnit的体系结构的单元测试框架 Install 我们用一个 PHP Archive (PHAR) 来包含你需要使用的PHPUnit</description></item><item><title>upgrade-mac-php-version.md</title><link>https://onlw.github.io/posts/201907040000/</link><pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907040000/</guid><description>mac 本地 php 版本较低，升级至 7.2 Upgrade update brew 如未安装 brew，参考 https://brew.sh/ 安装 brew update brew search php $ brew search php ==&amp;gt; Formulae brew-php-switcher php-cs-fixer phplint phpstan php php@7.1 phpmd phpunit php-code-sniffer php@7.2 phpmyadmin Install brew install php@7.2 安装完成之后，执行php -v 查</description></item><item><title>laravel-envoy</title><link>https://onlw.github.io/posts/201907020000/</link><pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201907020000/</guid><description>Introduction What is laravel-envoy Suppose you hava a samll project of your own,put it on a remote server. Every time you develop a function for this small project, you have to go online. The general operation will be the following. connect to server ssh username@ip enter the project cd workspace/my project update local code to the latest git pull Doing this thing manually for too long,It feels bad ～ Laravel</description></item><item><title>laravel-login</title><link>https://onlw.github.io/posts/201906140000/</link><pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201906140000/</guid><description>Quick Start composer create-project --prefer-dist laravel/laravel principle &amp;amp;&amp;amp; cd principle php artisan make:auth # database configuration vim .env php artisan db:seed --class=UsersTableSeeder php artisan serve Login Route Auth::routes();
# config/app.php &amp;#39;Auth&amp;#39; =&amp;gt; Illuminate\Support\Facades\Auth::class # Illuminate\Support\Facades\Auth public static function routes(array $options = []) { static::$app-&amp;gt;make(&amp;#39;router&amp;#39;)-&amp;gt;auth($options); } # Illuminate\Routing\RoutingServiceProvider protected function registerRouter() { $this-&amp;gt;app-&amp;gt;singleton(&amp;#39;router&amp;#39;, function ($app) { return new Router($app[&amp;#39;events&amp;#39;], $app); }); } # Illuminate\Routing\Router public function auth(array $options = []) { // Authentication Routes.</description></item><item><title>laravel-reset-password</title><link>https://onlw.github.io/posts/201905200000/</link><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201905200000/</guid><description>Reset Password Environment [TOC] Larval5.8 首先是 ResetPasswordController 的 reset 方法，其实是由引入的 trait ResetsPasswords 内部实现的 use Illuminate\Foundation\Auth\ResetsPasswords; use ResetsPasswords;</description></item><item><title>composer-package-build</title><link>https://onlw.github.io/posts/201902140000/</link><pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201902140000/</guid><description>Build composer package composer build your composer package create package floder mkdir package-name cd package-name init ashe@ashedeMacBook-Pro  ~/code/composer-package/express   master  composer init Welcome to the Composer config generator This command will guide you through creating your composer.json config. Package name (&amp;lt;vendor&amp;gt;/&amp;lt;name&amp;gt;) [ashe/express]: spaco/express Description []: get express php Author [spaco &amp;lt;she.ct@outlook.com&amp;gt;, n to skip]: Minimum Stability []: dev Package Type (e.g. library, project, metapackage, composer-plugin) []: library</description></item><item><title>flyway</title><link>https://onlw.github.io/posts/201812140000/</link><pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201812140000/</guid><description>Flyway Introduction Version control for your database.Robust schema evolution across all your environments.With ease, pleasure and plain SQL. 数据库的版本控制。跨所有环境的强大架构演变。轻松，愉快和简单的SQL 官网 How Flyway works Development environment flyway version : 5.2.4 mysql version : 5.7 Install docker-boxfuse-flyway 关</description></item><item><title>mysql-basic</title><link>https://onlw.github.io/posts/201812140000/</link><pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201812140000/</guid><description>Backend Service LNMP 操作系统 ：windows / linux（centos / ubuntu） HTTP 服务器 ： Apache / Nginx 作用目的是一致的, 简单说就是接收用户请求, 然后处理请</description></item><item><title>mysql-transaction</title><link>https://onlw.github.io/posts/201812090000/</link><pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201812090000/</guid><description>数据库事务（Database Transaction）,是指作为单个逻辑工作单元执行的一系列操作，要么完全执行，要么完全地不执行 案例 A 转账给B</description></item><item><title>php-garbage-collection</title><link>https://onlw.github.io/posts/201812090000/</link><pubDate>Sun, 09 Dec 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201812090000/</guid><description>Explains Garbage Collection (also known as GC) of PHP PHP Language PHP 是脚本语言，所谓脚本语言，就是说PHP并不是独立运行的，要运行PHP代码需要PHP解析器，用户编写的PHP代码最终都</description></item><item><title>recommended-software-install</title><link>https://onlw.github.io/posts/201812080000/</link><pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201812080000/</guid><description>mac program development navicat jetbrains postman api 调试工具 transmit ftp 工具 siteSucker 爬站 rds redis 客户端工具 swithhost 切换 hosts ,解决了来回切换测试 正式环境的问题 go2Shell iterm2 iterm2 + go2shell 在 finder中打开当年目录的 bash ,可定</description></item><item><title>zsh</title><link>https://onlw.github.io/posts/201812050000/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201812050000/</guid><description>##Install zsh(oh-my-zsh) &amp;amp;&amp;amp; plugins &amp;amp;&amp;amp; themes zsh (oh-my-zsh) Why zsh 样式不错 插件多 Install zsh-github sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;#34; Plugins Enabling Plugins Once you spot a plugin (or several) that you&amp;rsquo;d like to use with Oh My Zsh, you&amp;rsquo;ll need to enable them in the .zshrc file. You&amp;rsquo;ll find the zshrc file in your $HOME directory. Open it with your favorite text editor and you&amp;rsquo;ll</description></item><item><title>mq-introduction</title><link>https://onlw.github.io/posts/201811230000/</link><pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201811230000/</guid><description>MQ 简述 什么是MQ 消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式，软件的贮列用来处理一系列的输入，</description></item><item><title>elasticsearch-build-with-docker-compose</title><link>https://onlw.github.io/posts/201811140000/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201811140000/</guid><description>Elasticsearch Foreword Why ES 成熟 高可用 高扩展 Development Environment elasticsearch ## version 6.6.0 kibana ## version 6.6.0 Point Conception Apache Lucene Lucene是一套用于全文检索和搜寻的开放源码程式库，由Apache软件基金会支持和提供</description></item><item><title>api-gateway-introduction</title><link>https://onlw.github.io/posts/201810230000/</link><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201810230000/</guid><description>API Gateway Foreword 在非技术术语中，“网关或门是进入一个由墙围住的封闭空间的入口点。”同理，API网关是指位于防火墙或互联网后面 的服务的入口点。在微服务的</description></item><item><title>kafka-build-with-docker-compose</title><link>https://onlw.github.io/posts/201810050000/</link><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201810050000/</guid><description>Build Kafka with docker-compose Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka为处理实时数据提供一个统一、高吞</description></item><item><title>kafka-case-with-python</title><link>https://onlw.github.io/posts/201810050000/</link><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201810050000/</guid><description>Kafka in python Build kafka environment kafka find / -name \*kafka_\* | head -1 | grep -o &amp;#39;\kafka[^\n]*&amp;#39; kafka_2.11-2.0.1 python python -V #use pyenv 3.6.6 zookeeper version: echo stat|nc 127.0.0.1 2181 Zookeeper version: 3.4.9-1757313, built on 08/23/2016 06:50 GMT Clients: /172.23.0.1:41242[0](queued=0,recved=1,sent=0) /172.23.0.2:49830[1](queued=0,recved=1152,sent=1153) Latency min/avg/max: -33/0/91 Received: 5129 Sent: 5139 Connections: 2 Outstanding: 0 Zxid: 0xa3 Mode: standalone Node count: 133 Test Install Python Client kafka-python 1.4.4 pip install kafka-python Producer</description></item><item><title>hexo-on-github-pages</title><link>https://onlw.github.io/posts/201809010000/</link><pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201809010000/</guid><description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Precondition git : deploy to github node.js : Hexo 基于 node.js开发的 Environment git # version git --version git version 2.17.2 (Apple Git-113)</description></item><item><title>hexo-on-travis-CI</title><link>https://onlw.github.io/posts/201809010000/</link><pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201809010000/</guid><description>Quick Start travis-ci 是什么 一个使用yaml格式配置用于持续集成完成自动化测试部署的开源项目 官网：https://travis-ci.com/ 为什么使用 travis-ci 部</description></item><item><title>queue</title><link>https://onlw.github.io/posts/201808200000/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201808200000/</guid><description>Briefly introduce the principle of queues, the implementation of common programming languages Queue FIFO结构 像栈一样，队列（queue）也是一种线性表，它的特性是先进先出，插入在一端，删除在另一端。就像排队一样</description></item><item><title>solr</title><link>https://onlw.github.io/posts/201806130000/</link><pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201806130000/</guid><description/></item><item><title>RPC</title><link>https://onlw.github.io/posts/201508200000/</link><pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate><author>1216062928@qq.com (Who)</author><guid>https://onlw.github.io/posts/201508200000/</guid><description>RPC Queue FIFO结构</description></item></channel></rss>